# The template is intended to be used from a workflow run 
# as it will pick the artifacts from the triger (through workflow_id param)
name: windows-qe-tpl

on:  
  workflow_call:  
    inputs:  
      workflow-id:  
        required: true  
        type: string
      qe-type:  
        description: type of test; allowed values e2e or integration
        required: true  
        type: string
      preset:
        description: preset type only required if qe-type is e2e
        type: string  
      windows-featurepack:  
        type: string  
      windows-version:  
        type: string  
    secrets:  
      pull-secret:  
        required: true  
      arm-tenant-id:  
        required: true  
      arm-subscription-id:  
        required: true  
      arm-client-id:  
        required: true  
      arm-client-secret:  
        required: true  

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      statuses: write # needed to update commit status (pending/failure/sucess)
      checks: write # as documented in https://github.com/mikepenz/action-junit-report?tab=readme-ov-file#pr-run-permissions
    strategy:
      fail-fast: false
      
    steps:
    - name: Download artifacts to be tested
      id: download-gh-context-artifact
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: ${{inputs.workflow_id}}
        # It will download all
        # name: gh_context
        # name: crc-e2e-gh          
        # name: Windows Installer (windows-2022)

    - name: Set environment for the run
      run: |
        # Get origin commit sha for testing
        commit_sha=$(cat gh_context.json | jq -r '.event.after')
        if [[ -z "${commit_sha}" ]]; then
          # on first PR creation .event.after is empty, then .sha is used as commit instead
          commit_sha=$(cat gh_context.json | jq -r '.sha')
        fi
        echo "commit_sha=${commit_sha}" >> "$GITHUB_ENV"
        # Save pull-secret as file
        echo ${{secrets.pull-secret}} > pull-secret

    - name: Add status to the PR check
      run: |
        set -xuo
        # Status msg
        data="{\"state\":\"pending\"
        data="${data},\"description\":\"Running ${{inputs.qe-type}} on Windows\""
        data="${data},\"context\":\"ci/gh/${{inputs.qe-type}}/windows-${{inputs.windows-version}}-${{inputs.windows-featurepack}}\""
        data="${data},\"target_url\":\"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}"
        # Create status by API call
        curl -L -v -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ github.token }}" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.commit_sha }} \
          -d "${data}"

    - name: Create Windows instance
      run: |
        # Create instance
        podman run -d --name windows-create --rm \
          -v ${PWD}:/workspace:z \
          -e ARM_TENANT_ID=${{secrets.arm-tenant-id}} \
          -e ARM_SUBSCRIPTION_ID=${{secrets.arm-subscription-id}} \
          -e ARM_CLIENT_ID=${{secrets.arm-client-id}} \
          -e ARM_CLIENT_SECRET='${{secrets.arm-client-secret}}' \
          quay.io/rhqp/qenvs:v0.6.3 azure \
            windows create \
            --project-name 'windows-desktop' \
            --backed-url 'file:///workspace' \
            --conn-details-output '/workspace' \
            --windows-version '${{inputs.windows-version}}' \
            --windows-featurepack '${{inputs.windows-featurepack}}' \
            --tags project=openshift-local,source=github,org=${{github.repository_owner}} \
            --spot
        podman logs -f windows-create

    - name: Install CRC on host
      run: |
        podman run --rm -d --name crc-win-support \
          -e TARGET_HOST=$(cat host) \
          -e TARGET_HOST_USERNAME=$(cat username) \
          -e TARGET_HOST_KEY_PATH=/data/id_rsa \
          -e TARGET_FOLDER=crc-support \
          -e TARGET_CLEANUP='false' \
          -e OUTPUT_FOLDER=/data \
          -e DEBUG='true' \
          -v ${PWD}:/data:z \
          -v ${PWD}/crc-windows-installer.zip:/opt/crc-support/crc-windows-installer.zip:z \
          quay.io/rhqp/crc-support:v0.5-windows crc-support/run.ps1 \
            -targetPath "/Users/$(cat username)/crc-support" \
            -download 'false' \
            -install 'true' \
            -forceFresh 'false'
        podman logs -f crc-win-support

    - name: Run CRC e2e
      run: |
        # load crc-e2e image from tar file
        podman load -i crc-e2e.tar

        # run e2e
        podman run --rm -d --name crc-e2e \
          -e TARGET_HOST=$(cat host) \
          -e TARGET_HOST_USERNAME=$(cat username) \
          -e TARGET_HOST_KEY_PATH=/data/id_rsa \
          -e TARGET_FOLDER=crc-e2e \
          -e TARGET_RESULTS=results \
          -e OUTPUT_FOLDER=/data \
          -e DEBUG=true \
          -v $PWD/pull-secret:/opt/crc/pull-secret:z \
          -v $PWD:/data:z \
          quay.io/crcont/crc-e2e:gh-windows-amd64  \
              crc-e2e/run.ps1 -junitFilename crc-e2e-junit.xml 

        # Check logs 
        podman logs -f crc-e2e

    - name: Test Report
      id: test-report
      uses: mikepenz/action-junit-report@v4
      if: always() # always run even if the previous step fails
      with:
        fail_on_failure: true
        include_passed: true
        detailed_summary: true
        require_tests:  true
        report_paths: '**/*.xml'

    - name: Upload e2e results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: E2E-results-windows-${{ matrix.windows-version }}${{ matrix.windows-featurepack }}
        path: |
          **/*.xml
          **/*.results
          **/*.log

    - name: Update status of the PR check
      if: always()
      run: |
        set -xuo
        OUTCOME="success"
        if [[ ${{steps.test-report.outcome}} != "success" ]]; then 
          OUTCOME="failure";
        fi

        DESCRIPTION="Finished"
        CONTEXT="ci/gh/e2e/windows-${{ matrix.windows-version }}-${{ matrix.windows-featurepack }}"

        # post result to commit status
        curl -L -v \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${{ github.token }}" \
        https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.COMMIT_SHA }} \
        -d "{\"state\":\"${OUTCOME}\", \"description\":\"${DESCRIPTION}\", \"context\":\"${CONTEXT}\", \"target_url\":\"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}"

    - name: Destroy instance
      if: always()
      run: |
        # Make sure lock is removed
        rm -rf .pulumi/locks/*
        
        # Destroy instance
        podman run -d --name windows-destroy --rm \
          -v ${PWD}:/workspace:z \
          -e ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }} \
          -e ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }} \
          -e ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }} \
          -e ARM_CLIENT_SECRET='${{ secrets.ARM_CLIENT_SECRET }}' \
          quay.io/rhqp/qenvs:v0.6.0 azure \
            windows destroy \
            --project-name 'windows-desktop' \
            --backed-url 'file:///workspace'
        # Check logs
        podman logs -f windows-destroy



  - name: Set the tag
        run: |
          if [ -z "${{inputs.tag}}" ]
          then
            echo "final_tag=latest" >> $GITHUB_ENV
          else
            echo "final_tag=${{inputs.tag}}" >> $GITHUB_ENV
          fi 